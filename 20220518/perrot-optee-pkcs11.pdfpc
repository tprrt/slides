{"pdfpcFormat":1,"disableMarkdown":false,"noteFontSize":20,"pages":[{"idx":0,"label":"1","overlay":0,"note":"Welcome to this presentation\n\nToday, I'm speaking about the possibility to perform cryptography operation through OP-TEE with an on-die secure enclave."},{"idx":1,"label":"2","overlay":0,"note":"I'm an Embedded Linux engineer at Bootlin since eighteen months now.\n\nWe help client to introduce Linux and open-source software in their embedded devices.\n\nBefore I worked, several yers, for an IoT operator.\n\nAnd I'm living close to Toulouse."},{"idx":2,"label":"3","overlay":0,"note":"This presentation is divided in two main parts:\n\nAt first, I'm introducing OP-TEE, PKCS#11 and i.MX8 Soc familly.\n\nAnd in the second part, I explain how it is possible to build a Yocto distribution including required customisation and software parts to perform PKCS#11 operations on i.MX8 throught OP-TEE.\n\nIn my example, I assume that the BSP provides everything needed to use optee."},{"idx":4,"label":"5","overlay":0,"note":"Here, the goal is to be able to perform OpenSSL operations without use a secure element, or a HSM, a TPM, so on.\n\nWhile isolating secrets from the rest of the system and controlling their access.\n\nFor that the idea is to make them accessible, only in secure mode, and devices that will be used to store and to perform crypto operations can be only accessed from OP-TEE."},{"idx":5,"label":"6","overlay":0,"note":"PKCS#eleven is a cryptography standard, that define an platform independent  API, defining callback to create, manage and store keys and certificates.\n\nIt allows to use the same software stack on several kind of secure module, as Hardware Secure Module, Trusted Plaform Module, so on.\n\nThis API can be used with some open-source software libraries and tools as OpenSSL, OpenSSH...\n"},{"idx":6,"label":"7","overlay":0,"note":"OP-TEE is a Trusted Execution Environment, it is a\ncompanion OS which is isolated from Linux and can be used to perform some operations or to access critical devices.\n\nIn order, to add a protection layer against Linux security vulnerabilities, especially 0-days.\n\nOP-TEE and Linux communicate through the Secure Monitor which makes the link between the Normal world and the Secure world.\nHere, the Secure Monitor is provided by the Trusted Firmware (BL thirty one).\n\nOP-TEE can execute applications, named Trusted Applications that can be either include in the OP-TEE OS binary or which can be provided from the userspace.\n\nAnd Trusted Applications can be signed."},{"idx":7,"label":"8","overlay":0,"note":"i.MX eight SoC familly provides a few interresting features that can be used through OP-TEE, in our case to isolate keys and to perform crypto operations.\n\nHardware isolation is based on the ARM TrustZone and the secure boot on the NXP High Assurance Booting that allows to sign and also to encrypt bootloader stages, including OP-TEE.\n\nIt provides a crypto accelerator and a non-volatile storage, which are protected by hardware tampering features, and they can also be managed by OP-TEE, instead Linux."},{"idx":8,"label":"9","overlay":0,"note":"To use OP-TEE on i.MX eight SoC familly, it is necessary to use a SPL stage because the ROM code isn't able to load a boot container that containes additional binaries, as OP-TEE.\nSo, may be you will need to modify your BSP.\n\nThe boot sequence or bootloader image formats may be different, depending the platform.\n\nSome platform use FIP with is a generic way proposed by Trusted Firmware, it isn't the case on i.MX eight.\n\nSo, the SPL will start TF-A,  then TF-A will start OP-TEE and finally U-Boot.\n\nHere, boot stages can be also signed and encrypted with NXP Code Signing Tools."},{"idx":10,"label":"11","overlay":0,"note":"Here, I assume that the BSP provides everything needed to use optee.\n\nTo be able to perform PKCS eleven operation with OpenSSL through OP-TEE is it necessary, it is necessary to install a set of libraries and utilities.\n\nOpenSC provides a library, a engine, that allows the OpenSSL library to access PKCS#11 modules.\n\nlibckteec provides the TEE Client API library that allow to serialize and deserialize arguments sent to Trusted Applications.\n\nOP-TEE client  is normal world user space client APIs for OP-TEE.\n\nWe also need to install Trusted Applications, especially the one that allows to perform PKCS eleven operations from OP-TEE.\n\nFinally, Because OpenSSL doesn't provide interface to initialize or import PKCS eleven token, it is also necessary to install pkcs eleven tools.\n\n"},{"idx":11,"label":"12","overlay":0,"note":"Some Yocto BSP layer provides an optee machine feature to enable or disable optee support on the selected target.\n\nSo, in this case it is only necessary to enable the optee DISTRO_FEATURES, then the BSP build parameters will be updated.\nThen SPL, OP-TEE will be built; and TF-A will be rebuild with additional build parameters.\n\nFinally, to be able to perform pkcs eleven operations; packages have been identified need to be installed in the rootfs image.\n\nHere, OP-TEE functional tests are also install to be able to perform some verifications before to create a key.\n"},{"idx":12,"label":"13","overlay":0,"note":"\nIt is possible that the mainline BSP of you I.MX8 target doesn't provides an OP-TEE support, but it is possible to use the vendor BSP, by setting the variable IMX_DEFAUT_BSP.\n\nMaybe the OP-TEE PKCS elevent support isn't enable by default, so it is possible to override OP-TEE compilation flags with an additional parameter to enable it.\n\nIt is also possible to increase OP-TEE log level to debug; to append the key used to sign Trusted Applications. So, before to be executed the integrity of Trusted application will be checked.\n\nAnd if you use a custom SoM or board maybe you will need to modify some default platform configuration as the uart.\n"},{"idx":13,"label":"14","overlay":0,"note":"Here, a few examples of commands that can be used to check that optee is well probed and usable from the Linux userspace.\n\nWe can see that the optee driver is well probed and interfaces have been mounted.\n\nHere, we are also executed OP-TEE fonctional tests provided."},{"idx":14,"label":"15","overlay":0,"note":"Here, with this command we check that OP-TEE is reachable thought the  cryptoki API and then it is usable to perform PKCS eleven operations."},{"idx":15,"label":"16","overlay":0,"note":"Here, it is a example of a few commands to create a token that will be store into the non-volatile storage provided by the i.MX eight.\n"},{"idx":16,"label":"17","overlay":0,"note":"Here, we check that the token has been well created, and with the correct flags."},{"idx":17,"label":"18","overlay":0,"note":"Finally, here we create a key with openSSL over PKCS eleven and OP-TEE."},{"idx":18,"label":"19","overlay":0,"note":"Do you have questions?"}]}